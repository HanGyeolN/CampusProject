#View(tp2[,n])
target.pos
target.neg
# 부정 키워드 상위 n개 출력
n.keyword=5
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
}
# 긍정 키워드 상위 n개 출력
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
}
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
target.pos
target.neg
# 부정 키워드 상위 n개 출력
n.keyword=5
print("negative")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
}
# 긍정 키워드 상위 n개 출력
print("positive")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
}
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
target.pos
target.neg
# 부정 키워드 상위 n개 출력
n.keyword=5
print("---------------------negative---------------")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
}
# 긍정 키워드 상위 n개 출력
print("------------------positive--------------------")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
}
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
target.pos
target.neg
# 부정 키워드 상위 n개 출력
n.keyword=5
print("---------------------negative---------------")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = F)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
}
# 긍정 키워드 상위 n개 출력
print("------------------positive--------------------")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = F)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
}
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
target.pos
target.neg
# 부정 키워드 상위 n개 출력
n.keyword=5
print("---------------------negative---------------")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
}
# 긍정 키워드 상위 n개 출력
print("------------------positive--------------------")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
}
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
target.pos
target.neg
# 부정 키워드 상위 n개 출력
n.keyword=5
print("---------------------negative---------------")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
}
# 긍정 키워드 상위 n개 출력
print("------------------positive--------------------")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
}
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
print(reviews.result3$content[neg])
}
# 기준치 설정
score.neg = -5
score.pos = 15
my.text.location = "C:/Users/user/Desktop/CampusProject/SentimentAnalysis/ReviewData/apple-airpods.csv"
### csv 불러오기
reviews<-read_csv(my.text.location)
### 열 이름 주기
colnames(reviews)<-c("review.id", "content")
### 단어 토큰으로 쪼개기
reviews %>%
unnest_tokens(word, content) ->
reviews.word
### 5. 감성사전으로 점수 매기기
inner_join(reviews.word, get_sentiments("bing"), by="word")
# 6.score column 추가
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(word, review.id, sentiment) %>%
spread(sentiment, n, fill=0) %>%
arrange(review.id) ->
reviews.result
# 7.계산
reviews.result %>%
group_by(review.id) %>%
summarise(pos.sum = sum(positive),
neg.sum = sum(negative),
score = pos.sum-neg.sum) ->
reviews.result2
# reviews<-reviews.origin
# View(reviews)
# print(reviews)
# class(reviews)
# View(reviews.result2)
# print(reviews.result)
# class(reviews.result)
#View(left_join(reviews, reviews.result2, by="review.id", all=T)
reviews.result3<-left_join(reviews, reviews.result2, by="review.id", all=T)
length(reviews.result3$score)
#부정적인 리뷰
target<-(reviews.result3$score<=score.neg)
target<-replace_na(target, FALSE)
target.neg<-which(target)
review.neg<-reviews.result3$content[target.neg]
#긍정적인 리뷰
target<-(reviews.result3$score>=score.pos)
target<-replace_na(target, FALSE)
target.pos<-which(target)
review.pos<-reviews.result3$content[target.pos]
print(target.neg)
print(target.pos)
View(reviews.result3)
# 기준치 설정
score.neg = -4
score.pos = 5
my.text.location = "C:/Users/user/Desktop/CampusProject/SentimentAnalysis/ReviewData/apple-airpods.csv"
### csv 불러오기
reviews<-read_csv(my.text.location)
### 열 이름 주기
colnames(reviews)<-c("review.id", "content")
### 단어 토큰으로 쪼개기
reviews %>%
unnest_tokens(word, content) ->
reviews.word
### 5. 감성사전으로 점수 매기기
inner_join(reviews.word, get_sentiments("bing"), by="word")
# 6.score column 추가
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(word, review.id, sentiment) %>%
spread(sentiment, n, fill=0) %>%
arrange(review.id) ->
reviews.result
# 7.계산
reviews.result %>%
group_by(review.id) %>%
summarise(pos.sum = sum(positive),
neg.sum = sum(negative),
score = pos.sum-neg.sum) ->
reviews.result2
# reviews<-reviews.origin
# View(reviews)
# print(reviews)
# class(reviews)
# View(reviews.result2)
# print(reviews.result)
# class(reviews.result)
#View(left_join(reviews, reviews.result2, by="review.id", all=T)
reviews.result3<-left_join(reviews, reviews.result2, by="review.id", all=T)
length(reviews.result3$score)
#부정적인 리뷰
target<-(reviews.result3$score<=score.neg)
target<-replace_na(target, FALSE)
target.neg<-which(target)
#긍정적인 리뷰
target<-(reviews.result3$score>=score.pos)
target<-replace_na(target, FALSE)
target.pos<-which(target)
View(reviews.result3)
mycorpus<-VCorpus(VectorSource(reviews$content))
DocumentTermMatrix(mycorpus)
temp2<-mycorpus
for(i in 1:length(mycorpus)){
# 1. 공백, 숫자, 기호 전처리
temp2[[i]]$content<-str_replace_all(temp2[[i]]$content,"[[:space:]]{1,}", " ")
temp2[[i]]$content<-str_replace_all(temp2[[i]]$content,"[[:digit:]]{1,}","")
temp2[[i]]$content<-str_replace_all(temp2[[i]]$content,"[[:punct:]]{1,}","")
}
# 2. 불용어 사전 이용해서 불용어 제거
tm_map(temp2, FUN = removeWords, words = stopwords("en"))->temp2
# 3. wordstem으로 어근 변환 # library(SnowballC)
for(i in 1:length(mycorpus)){
temp2[[i]]$content<-wordStem(temp2[[i]]$content)
}
# 4. 단어 추출
for(i in 1:length(mycorpus)){
temp2[[i]]$content <- paste(unlist(str_extract_all(temp2[[i]]$content, boundary("word"))), collapse = " ")
}
# length(mycorpus)
# temp2[[12]]$content
# length(temp2[[1]]$content)
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
target.pos
target.neg
# 부정 키워드 상위 n개 출력
n.keyword=5
print("---------------------negative---------------")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
#print(reviews.result3$content[neg])
}
# 긍정 키워드 상위 n개 출력
print("------------------positive--------------------")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
#print(tp2[,pos]$dimnames$Terms[pos.top5])
}
print(traget.pos)
print(taraget.pos)
print(target.pos)
print(paste("target.pos :", target.pos, collapse = " "))
print(paste("target.pos :", paste(target.pos, collapse = " "), collapse = " "))
print(paste("target.neg :", paste(target.neg, collapse = " "), collapse = " "))
n.keyword=5
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
print(paste("target.pos :", paste(target.pos, collapse = " "), collapse = " "))
print(paste("target.neg :", paste(target.neg, collapse = " "), collapse = " "))
# 부정 키워드 상위 n개 출력
n.keyword=5
print("---------------------negative---------------")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
#print(reviews.result3$content[neg])
}
# 긍정 키워드 상위 n개 출력
print("------------------positive--------------------")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
#print(reviews.result3$content[pos])
}
# 기준치 설정
score.neg = -4
score.pos = 5
my.text.location = "C:/Users/user/Desktop/CampusProject/SentimentAnalysis/ReviewData/samsung-galaxy-s8.csv"
### csv 불러오기
reviews<-read_csv(my.text.location)
### 열 이름 주기
colnames(reviews)<-c("review.id", "content")
### 단어 토큰으로 쪼개기
reviews %>%
unnest_tokens(word, content) ->
reviews.word
### 5. 감성사전으로 점수 매기기
inner_join(reviews.word, get_sentiments("bing"), by="word")
# 6.score column 추가
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(word, review.id, sentiment) %>%
spread(sentiment, n, fill=0) %>%
arrange(review.id) ->
reviews.result
# 7.계산
reviews.result %>%
group_by(review.id) %>%
summarise(pos.sum = sum(positive),
neg.sum = sum(negative),
score = pos.sum-neg.sum) ->
reviews.result2
# reviews<-reviews.origin
# View(reviews)
# print(reviews)
# class(reviews)
# View(reviews.result2)
# print(reviews.result)
# class(reviews.result)
#View(left_join(reviews, reviews.result2, by="review.id", all=T)
reviews.result3<-left_join(reviews, reviews.result2, by="review.id", all=T)
length(reviews.result3$score)
#부정적인 리뷰
target<-(reviews.result3$score<=score.neg)
target<-replace_na(target, FALSE)
target.neg<-which(target)
#긍정적인 리뷰
target<-(reviews.result3$score>=score.pos)
target<-replace_na(target, FALSE)
target.pos<-which(target)
print(target.pos)
View(reviews.result3)
# 기준치 설정
score.neg = -4
score.pos = 5
my.text.location = "C:/Users/user/Desktop/CampusProject/SentimentAnalysis/ReviewData/apple-airpods.csv"
### csv 불러오기
reviews<-read_csv(my.text.location)
### 열 이름 주기
colnames(reviews)<-c("review.id", "content")
### 단어 토큰으로 쪼개기
reviews %>%
unnest_tokens(word, content) ->
reviews.word
### 5. 감성사전으로 점수 매기기
inner_join(reviews.word, get_sentiments("bing"), by="word")
# 6.score column 추가
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(word, review.id, sentiment) %>%
spread(sentiment, n, fill=0) %>%
arrange(review.id) ->
reviews.result
# 7.계산
reviews.result %>%
group_by(review.id) %>%
summarise(pos.sum = sum(positive),
neg.sum = sum(negative),
score = pos.sum-neg.sum) ->
reviews.result2
# reviews<-reviews.origin
# View(reviews)
# print(reviews)
# class(reviews)
# View(reviews.result2)
# print(reviews.result)
# class(reviews.result)
#View(left_join(reviews, reviews.result2, by="review.id", all=T)
reviews.result3<-left_join(reviews, reviews.result2, by="review.id", all=T)
length(reviews.result3$score)
#부정적인 리뷰
target<-(reviews.result3$score<=score.neg)
target<-replace_na(target, FALSE)
target.neg<-which(target)
#긍정적인 리뷰
target<-(reviews.result3$score>=score.pos)
target<-replace_na(target, FALSE)
target.pos<-which(target)
print(target.pos)
View(reviews.result3)
# 기준치 설정
score.neg = -4
score.pos = 5
my.text.location = "C:/Users/user/Desktop/CampusProject/SentimentAnalysis/ReviewData/apple-airpods.csv"
### csv 불러오기
reviews<-read_csv(my.text.location)
### 열 이름 주기
colnames(reviews)<-c("review.id", "content")
### 단어 토큰으로 쪼개기
reviews %>%
unnest_tokens(word, content) ->
reviews.word
### 5. 감성사전으로 점수 매기기
inner_join(reviews.word, get_sentiments("bing"), by="word")
# 6.score column 추가
reviews.word %>%
inner_join(get_sentiments("bing"), by="word") %>%
count(word, review.id, sentiment) %>%
spread(sentiment, n, fill=0) %>%
arrange(review.id) ->
reviews.result
# 7.계산
reviews.result %>%
group_by(review.id) %>%
summarise(pos.sum = sum(positive),
neg.sum = sum(negative),
score = pos.sum-neg.sum) ->
reviews.result2
# reviews<-reviews.origin
# View(reviews)
# print(reviews)
# class(reviews)
# View(reviews.result2)
# print(reviews.result)
# class(reviews.result)
#View(left_join(reviews, reviews.result2, by="review.id", all=T)
reviews.result3<-left_join(reviews, reviews.result2, by="review.id", all=T)
length(reviews.result3$score)
#부정적인 리뷰
target<-(reviews.result3$score<=score.neg)
target<-replace_na(target, FALSE)
target.neg<-which(target)
#긍정적인 리뷰
target<-(reviews.result3$score>=score.pos)
target<-replace_na(target, FALSE)
target.pos<-which(target)
print(target.pos)
View(reviews.result3)
mycorpus<-VCorpus(VectorSource(reviews$content))
DocumentTermMatrix(mycorpus)
temp2<-mycorpus
for(i in 1:length(mycorpus)){
# 1. 공백, 숫자, 기호 전처리
temp2[[i]]$content<-str_replace_all(temp2[[i]]$content,"[[:space:]]{1,}", " ")
temp2[[i]]$content<-str_replace_all(temp2[[i]]$content,"[[:digit:]]{1,}","")
temp2[[i]]$content<-str_replace_all(temp2[[i]]$content,"[[:punct:]]{1,}","")
}
# 2. 불용어 사전 이용해서 불용어 제거
tm_map(temp2, FUN = removeWords, words = stopwords("en"))->temp2
# 3. wordstem으로 어근 변환 # library(SnowballC)
for(i in 1:length(mycorpus)){
temp2[[i]]$content<-wordStem(temp2[[i]]$content)
}
# 4. 단어 추출
for(i in 1:length(mycorpus)){
temp2[[i]]$content <- paste(unlist(str_extract_all(temp2[[i]]$content, boundary("word"))), collapse = " ")
}
# length(mycorpus)
# temp2[[12]]$content
# length(temp2[[1]]$content)
# 5. TDM 생성
TermDocumentMatrix(temp2)->tdm.a
tdm.a
#View(inspect(tdm.a[1:10,1:20]))
# tfidf 생성
weightTfIdf(tdm.a)->tp2
#View(tp2[,n])
print(paste("target.pos :", paste(target.pos, collapse = " "), collapse = " "))
print(paste("target.neg :", paste(target.neg, collapse = " "), collapse = " "))
# 부정 키워드 상위 n개 출력
n.keyword=5
print("---------------------negative---------------")
for(neg in target.neg){
neg.top5<-tp2[,neg]$i[order(tp2[,neg]$v, decreasing = T)]
neg.top5<-head(neg.top5,n.keyword)
print(tp2[,neg]$dimnames$Terms[neg.top5])
#print(reviews.result3$content[neg])
}
# 긍정 키워드 상위 n개 출력
print("------------------positive--------------------")
for(pos in target.pos){
pos.top5<-tp2[,pos]$i[order(tp2[,pos]$v, decreasing = T)]
pos.top5<-head(pos.top5,n.keyword)
print(tp2[,pos]$dimnames$Terms[pos.top5])
#print(reviews.result3$content[pos])
}
